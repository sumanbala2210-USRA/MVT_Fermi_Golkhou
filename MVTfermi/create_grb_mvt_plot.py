import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import argparse

def plot_mvt_distribution_from_file(csv_filepath: Path):
    """
    Reads a CSV file of MVT simulation results and plots the distribution
    with robust statistics (median and 68% confidence interval).

    Args:
        csv_filepath (Path): The full path to the input results CSV file.
    """
    # --- 1. Input Validation ---
    if not csv_filepath.is_file():
        print(f"Error: File not found at '{csv_filepath}'")
        return

    print(f"Reading data from: {csv_filepath.name}")

    # --- 2. Load and Process Data ---
    try:
        df = pd.read_csv(csv_filepath, index_col='Iteration')
    except Exception as e:
        print(f"Error reading CSV file: {e}")
        return

    # Filter for valid runs where MVT > 0
    valid_results = df[df['MVT_ms'] > 0]['MVT_ms']
    
    total_runs = len(df)
    fail_count = total_runs - len(valid_results)
    
    if valid_results.empty:
        print("Error: No valid MVT results found in the file to plot.")
        return

    # --- 3. Calculate Robust Statistics ---
    # Calculate the 16th, 50th (median), and 84th percentiles
    p16, median_mvt, p84 = np.percentile(valid_results, [16, 50, 84])
    
    # Calculate asymmetric errors for reporting
    upper_error = p84 - median_mvt
    lower_error = median_mvt - p16

    print("\n--- Robust Statistics ---")
    print(f"Total simulations in file: {total_runs}")
    print(f"Valid (MVT > 0) simulations: {len(valid_results)}")
    print(f"Best Estimate (Median): {median_mvt:.3f} ms")
    print(f"68% Confidence Interval: [{p16:.3f}, {p84:.3f}] ms")
    print(f"Asymmetric Error: +{upper_error:.3f} / -{lower_error:.3f} ms")

    # --- 4. Create and Save the Plot ---
    plt.style.use('seaborn-v0_8-whitegrid')
    fig, ax = plt.subplots(figsize=(10, 6))

    # Plot the histogram
    ax.hist(valid_results, bins=30, density=True, color='skyblue',
            edgecolor='black', alpha=0.8, label=f"MVT Distribution ({len(valid_results)} runs)")

    # Overlay the statistics
    ax.axvline(median_mvt, color='firebrick', linestyle='-', lw=2.5,
               label=f"Median = {median_mvt:.3f} ms")
    
    ax.axvspan(p16, p84, color='firebrick', alpha=0.2,
               label=f"68% C.I. Range [{p16:.3f}, {p84:.3f}]")

    # Formatting
    ax.set_title("MVT Distribution from Simulation Results", fontsize=16)
    ax.set_xlabel("Minimum Variability Timescale (ms)", fontsize=12)
    ax.set_ylabel("Probability Density", fontsize=12)
    ax.legend(fontsize=10)
    ax.set_xlim(left=max(0, p16 - 3*lower_error)) # Sensible x-axis limit
    
    fig.tight_layout()

    # Define a clear output filename
    output_filename = csv_filepath.stem + "_plot.png"
    output_path = csv_filepath.parent / output_filename
    
    plt.savefig(output_path, dpi=300)
    print(f"\nPlot saved successfully to: {output_path}")
    plt.show()


if __name__ == '__main__':
    # --- Set up Command-Line Argument Parsing ---
    parser = argparse.ArgumentParser(
        description="Plot MVT distribution from a simulation results CSV file.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "csv_file",
        type=str,
        help="Path to the mvt_consistency_results.csv file generated by the main simulation."
    )
    
    args = parser.parse_args()
    
    # Convert the string path to a Path object and run the function
    plot_mvt_distribution_from_file(csv_filepath=Path(args.csv_file))